---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Dashboard - Alimentos de Emergencia">
  <div>
    <!-- Navbar -->
    <nav>
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <h1 class="text-sm sm:text-xl font-semibold text-white">
              Alimentos de Emergencia
            </h1>
          </div>
          <div class="flex items-center space-x-2">
            <span id="user-email" class="text-sm text-gray-500"></span>
            <button
              id="logout-btn"
              class="bg-red-600 hover:bg-red-700 text-white p-2 rounded-md text-sm font-medium cursor-pointer"
            >
              Cerrar Sesi√≥n
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Contenido principal -->
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- Estad√≠sticas -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div
                  class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center"
                >
                  <span class="text-2xl">üì¶</span>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Total Alimentos
                  </dt>
                  <dd
                    id="total-foods"
                    class="text-lg font-medium text-gray-900"
                  >
                    0
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div
                  class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center"
                >
                  <span class="text-2xl">‚ö†Ô∏è</span>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Pr√≥ximos a Vencer
                  </dt>
                  <dd
                    id="expiring-foods"
                    class="text-lg font-medium text-gray-900"
                  >
                    0
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div
                  class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center"
                >
                  <span class="text-2xl">‚ö°</span>
                </div>
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Total Calor√≠as
                  </dt>
                  <dd
                    id="total-calories"
                    class="text-lg font-medium text-gray-900"
                  >
                    0
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>      <!-- Botones de acci√≥n -->
      <div class="mb-6 flex flex-wrap gap-3">
        <button
          id="add-food-btn"
          class="bg-fuchsia-950 border-2 border-fuchsia-700 hover:bg-fuchsia-700 hover:border-fuchsia-400 text-white px-4 py-2 rounded-md text-sm font-medium inline-flex items-center cursor-pointer"
        >
          Agregar Alimento
        </button>
        <button
          id="manage-locations-btn"
          class="bg-blue-950 border-2 border-blue-700 hover:bg-blue-700 hover:border-blue-400 text-white px-4 py-2 rounded-md text-sm font-medium inline-flex items-center cursor-pointer"
        >
          üè† Gestionar Ubicaciones
        </button>
      </div><!-- Controles de b√∫squeda y filtros -->
      <div class="mb-6 space-y-4">
        <!-- Barra de b√∫squeda -->
        <div class="flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <label for="search-input" class="block text-sm font-medium text-white mb-2">
              Buscar alimentos:
            </label>
            <input
              type="text"
              id="search-input"
              placeholder="Buscar por nombre de alimento..."
              aria-label="Buscar alimentos por nombre"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            />
          </div>
          <div class="flex-shrink-0">
            <label for="sort-select" class="block text-sm font-medium text-white mb-2">
              Ordenar por:
            </label>
            <select
              id="sort-select"
              aria-label="Ordenar alimentos por criterio"
              class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
            >
              <option value="name">Nombre</option>
              <option value="category">Categor√≠a</option>
              <option value="expiry">Fecha de vencimiento</option>
              <option value="calories">Calor√≠as</option>
              <option value="dateAdded">Fecha agregado</option>
            </select>
          </div>
        </div>
        
        <!-- Filtros por categor√≠a -->
        <div class="flex flex-wrap gap-2">
          <label class="text-sm font-medium text-white mr-2"
            >Filtrar por categor√≠a:</label
          >          <button
            id="filter-all"
            aria-label="Mostrar todos los alimentos"
            class="px-3 py-1 text-xs rounded-full bg-fuchsia-700 text-white hover:bg-fuchsia-600 filter-btn cursor-pointer"
          >            üìã Todas
          </button>
          <button
            id="filter-latas"
            aria-label="Filtrar por categor√≠a latas"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            ü•´ Latas
          </button>
          <button
            id="filter-paquetes"
            aria-label="Filtrar por categor√≠a paquetes"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            üì¶ Paquetes
          </button>
          <button
            id="filter-frescos"
            aria-label="Filtrar por categor√≠a frescos"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            ü•¨ Frescos
          </button>          <button
            id="filter-frascos"
            aria-label="Filtrar por categor√≠a frascos"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            ü´ô Frascos
          </button>
          <button
            id="filter-bebidas"
            aria-label="Filtrar por categor√≠a bebidas"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            ü•§ Bebidas
          </button>
          <button
            id="filter-congelados"
            aria-label="Filtrar por categor√≠a congelados"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            üßä Congelados
          </button>
          <button
            id="filter-granos"
            aria-label="Filtrar por categor√≠a granos"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            üåæ Granos
          </button>          <button
            id="filter-otros"
            aria-label="Filtrar por categor√≠a otros"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            üìã Otros
          </button>
          <button
            id="filter-condimentos"
            aria-label="Filtrar por categor√≠a condimentos"
            class="px-3 py-1 text-xs rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 filter-btn cursor-pointer"
          >
            üßÇ Condimentos
          </button>
        </div>
      </div>

      <!-- Lista de alimentos -->
      <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900">
            Inventario Total
          </h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Lista de todos tus alimentos de emergencia
          </p>
        </div>
        <div id="foods-list" class="border-t border-gray-200">
          <div id="loading-foods" class="px-4 py-5 text-center text-gray-500">
            <span class="animate-spin inline-block text-3xl mb-2">‚è≥</span>
            <br />Cargando alimentos...
          </div>
          <div
            id="empty-state"
            class="px-4 py-5 text-center text-gray-500 hidden"
          >
            <span class="text-5xl mb-4 block">üç±</span>
            <h3 class="text-sm font-medium text-gray-900 mb-2">
              No hay alimentos registrados
            </h3>
            <p class="text-sm text-gray-500">
              Comienza agregando tu primer alimento de emergencia
            </p>
          </div>
          <div id="foods-container"></div>
        </div>
      </div>
    </main>

    <!-- Modal para agregar/editar alimento -->
    <div
      id="food-modal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
    >
      <div
        class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
      >
        <div class="mt-3">
          <h3 id="modal-title" class="text-lg font-medium text-gray-900 mb-4">
            Agregar Alimento
          </h3>
          <form id="food-form" class="space-y-4">
            <div>
              <label
                for="food-name"
                class="block text-sm font-medium text-gray-700"
                >Nombre del Alimento</label
              >
              <input
                type="text"
                id="food-name"
                name="name"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="Ej: Arroz, Frijoles, At√∫n"
              />
            </div>

            <div>
              <label
                for="food-category"
                class="block text-sm font-medium text-gray-700">Categor√≠a</label
              >              <select
                id="food-category"
                name="category"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="">Seleccionar categor√≠a</option>
                <option value="latas">ü•´ Latas</option>
                <option value="paquetes">üì¶ Paquetes</option>
                <option value="frescos">ü•¨ Frescos</option>
                <option value="frascos">ü´ô Frascos</option>
                <option value="bebidas">ü•§ Bebidas</option>
                <option value="congelados">üßä Congelados</option>                <option value="granos">üåæ Granos</option>
                <option value="condimentos">üßÇ Condimentos</option>
                <option value="otros">üìã Otros</option>
              </select>
            </div>
            <div>
              <label
                for="food-quantity"
                class="block text-sm font-medium text-gray-700">Cantidad</label
              >
              <input
                type="number"
                id="food-quantity"
                name="quantity"
                min="1"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="Ej: 2"
              />
            </div>

            <div>
              <label
                for="food-unit"
                class="block text-sm font-medium text-gray-700">Unidad</label
              >              <select
                id="food-unit"
                name="unit"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="">Seleccionar unidad</option>
                <option value="gramos">Gramos (g)</option>
                <option value="mililitros">Mililitros (ml)</option>
                <option value="kilogramos">Kilogramos (kg)</option>
                <option value="litros">Litros (L)</option>
                <option value="botella">Botella (750ml)</option>
                <option value="paquete/lata">Paquete/Lata</option>
              </select>
            </div>

            <div>
              <label
                for="food-calories"
                class="block text-sm font-medium text-gray-700"
                >Calor√≠as</label
              >
              <input
                type="number"
                id="food-calories"
                name="calories"
                min="0"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="Ej: 350"
              />
            </div>            <div>              <label
                for="food-expiry"
                class="block text-sm font-medium text-gray-700"
                >Fecha de Vencimiento</label
              >
              <input
                type="date"
                id="food-expiry"
                name="expiryDate"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                style="color-scheme: light;"
              />
            </div>

            <div>
              <label
                for="food-location"
                class="block text-sm font-medium text-gray-700"
                >Ubicaci√≥n</label
              >
              <select
                id="food-location"
                name="location"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="">Seleccionar ubicaci√≥n</option>
                <option value="despensa">üè† Despensa</option>
                <option value="refrigerador">‚ùÑÔ∏è Refrigerador</option>
                <option value="congelador">üßä Congelador</option>
                <option value="alacena">üì¶ Alacena</option>
              </select>
            </div>

            <div>
              <label
                for="food-notes"
                class="block text-sm font-medium text-gray-700"
                >Notas (opcional)</label
              >
              <textarea
                id="food-notes"
                name="notes"
                rows="3"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                placeholder="Ej: Comprado en oferta, para usar primero, regalo de..."
              ></textarea>
            </div>
            <div class="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                id="cancel-btn"
                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 cursor-pointer"
              >
                Cancelar
              </button>
              <button
                type="submit"
                id="save-btn"
                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 cursor-pointer"
              >
                <span id="save-spinner" class="hidden">
                  <span class="animate-spin inline-block mr-2 text-lg">‚è≥</span>
                </span>
                <span id="save-text">Guardar</span>
              </button>
            </div>
          </form>
        </div>
      </div>    </div>

    <!-- Modal para gestionar ubicaciones -->
    <div
      id="locations-modal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden"
      role="dialog"
      aria-labelledby="locations-modal-title"
      aria-modal="true"
    >      <div
        class="relative top-20 mx-auto p-5 border w-[480px] shadow-lg rounded-md bg-white"
      >
        <div class="mt-3">
          <h3 id="locations-modal-title" class="text-lg font-medium text-gray-900 mb-4">
            üè† Gestionar Ubicaciones
          </h3>
          <div class="space-y-4">            <p class="text-sm text-gray-600 mb-4">
              Personaliza hasta 4 ubicaciones para organizar tus alimentos. Puedes cambiar el nombre y emoji de cada ubicaci√≥n:
            </p>
            
            <div id="locations-list" class="space-y-3">
              <!-- Las ubicaciones se cargar√°n din√°micamente -->
            </div>
            
            <div class="flex justify-end space-x-3 pt-4 border-t">
              <button
                type="button"
                id="locations-cancel-btn"
                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 cursor-pointer"
              >
                Cancelar
              </button>
              <button
                type="button"
                id="locations-save-btn"
                class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 cursor-pointer"
              >
                Guardar Ubicaciones
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Toast para notificaciones -->
    <div
      id="toast"
      class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-md shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out"
    >
      <span id="toast-message"></span>
    </div>
  </div>
</Layout>

<script>
  // @ts-nocheck

  import { authService } from "../firebase/authService.js";
  import { foodService } from "../firebase/foodService.js";
  import { logOut } from "../firebase/firebaseConfig.js";
  import useEmergencyFoodStore from "../store/useStore.js";

  // Store
  const store = useEmergencyFoodStore();

  // Variables globales
  let currentUser = null;
  let editingFoodId = null;
  let unsubscribe = null;
  // Elementos del DOM
  const userEmail = document.getElementById("user-email");
  const logoutBtn = document.getElementById("logout-btn");
  const addFoodBtn = document.getElementById("add-food-btn");
  const manageLocationsBtn = document.getElementById("manage-locations-btn");
  const foodModal = document.getElementById("food-modal");
  const locationsModal = document.getElementById("locations-modal");
  const foodForm = document.getElementById("food-form");
  const modalTitle = document.getElementById("modal-title");
  const cancelBtn = document.getElementById("cancel-btn");
  const locationsCancelBtn = document.getElementById("locations-cancel-btn");
  const locationsSaveBtn = document.getElementById("locations-save-btn");
  const saveBtn = document.getElementById("save-btn");
  const toast = document.getElementById("toast");
  const toastMessage = document.getElementById("toast-message");
  
  // Elementos de b√∫squeda y ordenamiento
  const searchInput = document.getElementById("search-input");
  const sortSelect = document.getElementById("sort-select");
  
  // Elementos de estad√≠sticas
  const totalFoods = document.getElementById("total-foods");
  const expiringFoods = document.getElementById("expiring-foods");
  const totalCalories = document.getElementById("total-calories");

  // Elementos de filtros
  const filterBtns = document.querySelectorAll(".filter-btn");
  let currentFilter = "all";
  let searchTerm = "";
  let sortBy = "name";
  
  // Elementos de lista
  const foodsList = document.getElementById("foods-list");
  const foodsContainer = document.getElementById("foods-container");
  const loadingFoods = document.getElementById("loading-foods");
  const emptyState = document.getElementById("empty-state");

  // Ubicaciones predeterminadas
  const defaultLocations = [
    { id: "despensa", name: "Despensa", emoji: "üè†", enabled: true },
    { id: "refrigerador", name: "Refrigerador", emoji: "‚ùÑÔ∏è", enabled: true },
    { id: "congelador", name: "Congelador", emoji: "üßä", enabled: true },
    { id: "alacena", name: "Alacena", emoji: "üì¶", enabled: true }
  ];

  // Funciones de utilidad
  function showToast(message, isError = false) {
    toastMessage.textContent = message;
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-md shadow-lg transform transition-transform duration-300 ease-in-out ${
      isError ? "bg-red-500" : "bg-green-500"
    } text-white`;
    toast.style.transform = "translateX(0)";

    setTimeout(() => {
      toast.style.transform = "translateX(100%)";
    }, 3000);
  }
  function formatDate(date) {
    if (!date) return "";
    const d = new Date(date.seconds ? date.seconds * 1000 : date);
    return d.toLocaleDateString("es-ES");
  }

  function formatDateForInput(date) {
    if (!date) return "";
    const d = new Date(date.seconds ? date.seconds * 1000 : date);
    return d.toISOString().split("T")[0];
  }

  function getDaysUntilExpiry(expiryDate) {
    const expiry = new Date(
      expiryDate.seconds ? expiryDate.seconds * 1000 : expiryDate
    );
    const today = new Date();
    const diffTime = expiry.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  }

  function getExpiryStatusClass(days) {
    if (days < 0) return "bg-red-100 text-red-800";
    if (days <= 7) return "bg-orange-100 text-orange-800";
    if (days <= 30) return "bg-yellow-100 text-yellow-800";
    return "bg-green-100 text-green-800";
  }

  function getExpiryStatusText(days) {
    if (days < 0) return `Vencido hace ${Math.abs(days)} d√≠as`;
    if (days === 0) return "Vence hoy";
    if (days === 1) return "Vence ma√±ana";
    return `Vence en ${days} d√≠as`;
  }
  // Actualizar estad√≠sticas
  function updateStats(foods) {
    const total = foods.length;
    const expiring = foods.filter(
      (food) => getDaysUntilExpiry(food.expiryDate) <= 30
    ).length;

    // Calcular calor√≠as totales: solo suma de calor√≠as (sin multiplicar por cantidad)
    const calories = foods.reduce(
      (sum, food) => sum + Number(food.calories),
      0
    );

    totalFoods.textContent = total;
    expiringFoods.textContent = expiring;
    totalCalories.textContent = calories.toLocaleString();
  }  // Renderizar lista de alimentos
  function renderFoodsList(foods) {
    loadingFoods.classList.add("hidden");

    // Filtrar por b√∫squeda
    let filteredFoods = foods.filter(food => 
      food.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Filtrar por categor√≠a
    if (currentFilter !== "all") {
      filteredFoods = filteredFoods.filter((food) => food.category === currentFilter);
    }

    // Ordenar alimentos
    filteredFoods.sort((a, b) => {
      switch (sortBy) {
        case "name":
          return a.name.localeCompare(b.name);
        case "category":
          return a.category.localeCompare(b.category);
        case "expiry":
          return new Date(a.expiryDate.seconds ? a.expiryDate.seconds * 1000 : a.expiryDate) - 
                 new Date(b.expiryDate.seconds ? b.expiryDate.seconds * 1000 : b.expiryDate);
        case "calories":
          return b.calories - a.calories;
        case "dateAdded":
          return new Date(b.dateAdded?.seconds ? b.dateAdded.seconds * 1000 : b.dateAdded || 0) - 
                 new Date(a.dateAdded?.seconds ? a.dateAdded.seconds * 1000 : a.dateAdded || 0);
        default:
          return 0;
      }
    });

    if (filteredFoods.length === 0) {
      emptyState.classList.remove("hidden");
      foodsContainer.innerHTML = "";
      return;
    }

    emptyState.classList.add("hidden");

    const foodsHTML = filteredFoods
      .map((food) => {
        const daysUntilExpiry = getDaysUntilExpiry(food.expiryDate);
        const statusClass = getExpiryStatusClass(daysUntilExpiry);
        const statusText = getExpiryStatusText(daysUntilExpiry);        
        
        // Mapear categor√≠as a emojis
        const categoryEmojis = {
          latas: "ü•´",
          paquetes: "üì¶",
          frescos: "ü•¨",
          frascos: "ü´ô",
          bebidas: "ü•§",
          congelados: "üßä",
          granos: "üåæ",
          condimentos: "üßÇ",
          otros: "üìã",
        };
        const categoryEmoji = categoryEmojis[food.category] || "üìã";        // Mapear ubicaciones a emojis personalizados
        const locations = getStoredLocations();
        const locationData = locations.find(loc => loc.id === food.location);
        const locationEmoji = locationData ? locationData.emoji : "ÔøΩ";
        const locationName = locationData ? locationData.name : (food.location || 'No especificada');

        return `
        <div class="px-4 py-4 border-b border-gray-200 hover:bg-gray-50">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-2">
                  <span class="text-lg">${categoryEmoji}</span>
                  <h4 class="text-sm font-medium text-gray-900">${food.name}</h4>
                  <span class="text-xs text-gray-500">${locationEmoji} ${locationName}</span>
                </div>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass}">
                  ${statusText}
                </span>
              </div>
              <div class="mt-1 text-sm text-gray-500 ml-7">
                <span class="mr-4">Cantidad: ${food.quantity} ${food.unit}</span>
                <span class="mr-4">Calor√≠as: ${food.calories}</span>
                <span class="mr-4">Vencimiento: ${formatDate(food.expiryDate)}</span>
              </div>
              ${food.notes ? `<div class="mt-1 text-xs text-gray-400 ml-7 italic">üìù ${food.notes}</div>` : ''}
            </div>            
            <div class="flex items-center space-x-2 ml-4">
              <button
                onclick="editFood('${food.id}')"
                class="text-blue-600 hover:text-blue-800 text-sm font-medium cursor-pointer"
                aria-label="Editar ${food.name}"
              >
                Editar
              </button>
              <button
                onclick="deleteFood('${food.id}')"
                class="text-red-600 hover:text-red-800 text-sm font-medium cursor-pointer"
                aria-label="Eliminar ${food.name}"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      `;
      })
      .join("");

    foodsContainer.innerHTML = foodsHTML;
  }
  // Abrir modal
  function openModal(food = null) {
    editingFoodId = food?.id || null;
    modalTitle.textContent = food ? "Editar Alimento" : "Agregar Alimento";
    
    // Cargar ubicaciones disponibles
    loadLocationOptions();
    
    if (food) {
      document.getElementById("food-name").value = food.name || "";
      document.getElementById("food-category").value = food.category || "";
      document.getElementById("food-quantity").value = food.quantity || "";      
      document.getElementById("food-unit").value = food.unit || "";
      document.getElementById("food-calories").value = food.calories || "";
      document.getElementById("food-expiry").value = formatDateForInput(food.expiryDate);
      document.getElementById("food-location").value = food.location || "";
      document.getElementById("food-notes").value = food.notes || "";
    } else {
      foodForm.reset();
    }

    foodModal.classList.remove("hidden");
  }

  // Cerrar modal
  function closeModal() {
    foodModal.classList.add("hidden");
    editingFoodId = null;
  }
  // Funciones globales para los botones
  window.editFood = (foodId) => {
    const food = store.getState().foods.find((f) => f.id === foodId);
    if (food) {
      openModal(food);
    }
  };

  window.deleteFood = async (foodId) => {
    if (!confirm("¬øEst√°s seguro de que quieres eliminar este alimento?")) {
      return;
    }

    try {
      await foodService.deleteFood(currentUser.uid, foodId);
      showToast("Alimento eliminado exitosamente");
    } catch (error) {
      showToast("Error al eliminar alimento: " + error.message, true);
    }
  };
  // Funciones para gesti√≥n de ubicaciones
  function getStoredLocations() {
    const stored = localStorage.getItem('emergency-food-locations');
    return stored ? JSON.parse(stored) : defaultLocations;
  }

  function saveLocations(locations) {
    localStorage.setItem('emergency-food-locations', JSON.stringify(locations));
  }
  function loadLocationOptions() {
    const locations = getStoredLocations();
    const locationSelect = document.getElementById("food-location");
    
    // Limpiar opciones existentes excepto la primera
    locationSelect.innerHTML = '<option value="">Seleccionar ubicaci√≥n</option>';
    
    // A√±adir ubicaciones habilitadas con sus emojis personalizados
    locations.filter(loc => loc.enabled).forEach(location => {
      const option = document.createElement('option');
      option.value = location.id;
      option.textContent = `${location.emoji} ${location.name}`;
      locationSelect.appendChild(option);
    });
  }
  function renderLocationsManager() {
    const locations = getStoredLocations();
    const container = document.getElementById('locations-list');
      // Lista de emojis disponibles para ubicaciones
    const availableEmojis = [
      'üè†', '‚ùÑÔ∏è', 'üßä', 'üì¶', 'üè™', 'üçΩÔ∏è', 'ü•´', 'üö™', 
      'üèòÔ∏è', 'ÔøΩÔ∏è', 'üß∫', 'üìã', 'üéí', 'üõí', 'üì±', 'üíº',
      'üóÑÔ∏è', 'üóÉÔ∏è', 'üìÇ', 'üìÅ', 'üèÜ', 'üéØ', 'üîí', 'üîë'
    ];
    
    container.innerHTML = locations.map((location, index) => `
      <div class="p-3 border rounded-md space-y-3">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3 flex-1">
            <!-- Selector de emoji -->
            <div class="relative">
              <button 
                type="button"
                class="emoji-selector-btn text-2xl border border-gray-300 rounded-md p-1 hover:bg-gray-50"
                data-index="${index}"
              >
                ${location.emoji}
              </button>
              <div class="emoji-dropdown absolute top-full left-0 mt-1 bg-white border border-gray-300 rounded-md shadow-lg p-2 grid grid-cols-6 gap-1 w-48 z-10 hidden">
                ${availableEmojis.map(emoji => `
                  <button 
                    type="button" 
                    class="emoji-option text-lg hover:bg-gray-100 rounded p-1"
                    data-emoji="${emoji}"
                    data-index="${index}"
                  >
                    ${emoji}
                  </button>
                `).join('')}
              </div>
            </div>
            
            <!-- Input de nombre -->
            <input 
              type="text" 
              value="${location.name}" 
              data-index="${index}"
              class="location-name-input flex-1 px-2 py-1 border border-gray-300 rounded-md text-sm"
              maxlength="20"
              placeholder="Nombre de ubicaci√≥n"
            />
          </div>
          
          <!-- Checkbox de habilitado -->
          <label class="flex items-center ml-3">
            <input 
              type="checkbox" 
              ${location.enabled ? 'checked' : ''} 
              data-index="${index}"
              class="location-enabled-checkbox mr-2"
            />
            <span class="text-sm text-gray-600">Activa</span>
          </label>
        </div>
      </div>
    `).join('');
    
    // A√±adir event listeners para los selectores de emoji
    setupEmojiSelectors();
  }
  function setupEmojiSelectors() {
    // Event listeners para abrir/cerrar dropdowns de emoji
    document.querySelectorAll('.emoji-selector-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const dropdown = btn.nextElementSibling;
        
        // Cerrar otros dropdowns
        document.querySelectorAll('.emoji-dropdown').forEach(d => {
          if (d !== dropdown) d.classList.add('hidden');
        });
        
        // Toggle del dropdown actual
        dropdown.classList.toggle('hidden');
      });
    });
    
    // Event listeners para seleccionar emoji
    document.querySelectorAll('.emoji-option').forEach(option => {
      option.addEventListener('click', (e) => {
        e.stopPropagation();
        const emoji = option.dataset.emoji;
        const index = option.dataset.index;
        const btn = document.querySelector(`[data-index="${index}"].emoji-selector-btn`);
        const dropdown = option.closest('.emoji-dropdown');
        
        // Actualizar el bot√≥n con el nuevo emoji
        btn.textContent = emoji;
        
        // Cerrar el dropdown
        dropdown.classList.add('hidden');
      });
    });
    
    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener('click', () => {
      document.querySelectorAll('.emoji-dropdown').forEach(dropdown => {
        dropdown.classList.add('hidden');
      });
    });
  }

  function openLocationsModal() {
    renderLocationsManager();
    locationsModal.classList.remove("hidden");
  }

  function closeLocationsModal() {
    locationsModal.classList.add("hidden");
  }

  function saveLocationsFromModal() {
    const locations = getStoredLocations();
    const nameInputs = document.querySelectorAll('.location-name-input');
    const enabledInputs = document.querySelectorAll('.location-enabled-checkbox');
    const emojiButtons = document.querySelectorAll('.emoji-selector-btn');
    
    nameInputs.forEach((input, index) => {
      locations[index].name = input.value.trim() || locations[index].name;
    });
    
    enabledInputs.forEach((input, index) => {
      locations[index].enabled = input.checked;
    });
    
    emojiButtons.forEach((btn, index) => {
      locations[index].emoji = btn.textContent.trim();
    });
    
    saveLocations(locations);
    closeLocationsModal();
    showToast("Ubicaciones actualizadas correctamente");
  }

  // Event listeners
  logoutBtn.addEventListener("click", async () => {
    try {
      await logOut();
      store.logout();
      window.location.href = "/";
    } catch (error) {
      showToast("Error al cerrar sesi√≥n", true);
    }
  });
  
  addFoodBtn.addEventListener("click", () => openModal());
  manageLocationsBtn.addEventListener("click", () => openLocationsModal());
  cancelBtn.addEventListener("click", closeModal);
  locationsCancelBtn.addEventListener("click", closeLocationsModal);
  locationsSaveBtn.addEventListener("click", saveLocationsFromModal);

  // Event listeners para b√∫squeda y ordenamiento
  searchInput.addEventListener("input", (e) => {
    searchTerm = e.target.value;
    const foods = store.getState().foods;
    renderFoodsList(foods);
  });

  sortSelect.addEventListener("change", (e) => {
    sortBy = e.target.value;
    const foods = store.getState().foods;
    renderFoodsList(foods);
  });// Event listeners para filtros
  filterBtns.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      // Remover estilos activos de todos los botones y aplicar estilos inactivos
      filterBtns.forEach((b) => {
        b.classList.remove("bg-blue-600", "text-white");
        b.classList.add("bg-gray-100", "text-gray-600");
      });

      // Aplicar estilos activos al bot√≥n clickeado
      const target = e.currentTarget;
      target.classList.remove("bg-gray-100", "text-gray-600");
      target.classList.add("bg-blue-600", "text-white");

      // Actualizar filtro actual
      currentFilter = target.id.replace("filter-", "");

      // Re-renderizar la lista con el filtro aplicado
      const currentFoods = store.getState().foods;
      renderFoodsList(currentFoods);
    });
  });
  // Cerrar modal al hacer click fuera
  foodModal.addEventListener("click", (e) => {
    if (e.target === foodModal) {
      closeModal();
    }
  });

  // Cerrar modal de ubicaciones al hacer click fuera
  locationsModal.addEventListener("click", (e) => {
    if (e.target === locationsModal) {
      closeLocationsModal();
    }
  });  // Manejo del formulario
  foodForm.addEventListener("submit", async (e) => {
    e.preventDefault();    // Obtener datos del formulario de manera simple
    const name = document.getElementById("food-name").value;
    const category = document.getElementById("food-category").value;
    const quantity = parseInt(document.getElementById("food-quantity").value) || 1;
    const unit = document.getElementById("food-unit").value;
    const calories = parseInt(document.getElementById("food-calories").value) || 0;
    const expiryDate = new Date(document.getElementById("food-expiry").value);
    const location = document.getElementById("food-location").value;
    const notes = document.getElementById("food-notes").value.trim();

    const foodData = {
      name,
      category,
      quantity,
      unit,
      calories,
      expiryDate,
      location,
      notes
    };

    // Solo a√±adir dateAdded si es un nuevo alimento
    if (!editingFoodId) {
      foodData.dateAdded = new Date();
    }

    // Mostrar loading
    document.getElementById("save-spinner").classList.remove("hidden");
    document.getElementById("save-text").textContent = "Guardando...";
    saveBtn.disabled = true;

    try {
      if (editingFoodId) {
        await foodService.updateFood(currentUser.uid, editingFoodId, foodData);
        showToast("Alimento actualizado exitosamente");
      } else {
        await foodService.addFood(currentUser.uid, foodData);
        showToast("Alimento agregado exitosamente");
      }

      closeModal();
    } catch (error) {
      showToast("Error al guardar alimento: " + error.message, true);
    } finally {
      // Ocultar loading
      document.getElementById("save-spinner").classList.add("hidden");
      document.getElementById("save-text").textContent = "Guardar";
      saveBtn.disabled = false;
    }
  });
  // Verificar autenticaci√≥n y cargar datos
  authService.onAuthStateChanged(async (user) => {
    if (!user) {
      window.location.href = "/";
      return;
    }

    currentUser = user;
    userEmail.textContent = user.email;

    store.setUser({
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
    });

    // Suscribirse a cambios en los alimentos
    unsubscribe = foodService.onFoodsChange(user.uid, (foods) => {
      store.setFoods(foods);
      updateStats(foods);
      renderFoodsList(foods);
    });

    // Verificar alimentos pr√≥ximos a vencer y mostrar toast
    setTimeout(async () => {
      await foodService.checkExpiringFoodsAndShowToast(user.uid);
    }, 1000); // Esperar 1 segundo para que se cargue la p√°gina
  });

  // Limpiar suscripci√≥n al salir
  window.addEventListener("beforeunload", () => {
    if (unsubscribe) {
      unsubscribe();
    }
  });
</script>
